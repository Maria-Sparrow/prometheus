void SortArray(Matrix  arr[]) { for (int i = 0; i < n; i++) { for (int BlockSizeIterator = 1; BlockSizeIterator < n; BlockSizeIterator *= 2) { for (int BlockIterator = 0; BlockIterator < n - BlockSizeIterator; BlockIterator += 2 * BlockSizeIterator) { int LeftBlockIterator = 0; int RightBlockIterator = 0; int LeftBorder = BlockIterator; int MidBorder = BlockIterator + BlockSizeIterator; int RightBorder = BlockIterator + 2 * BlockSizeIterator; RightBorder = (RightBorder < n) ? RightBorder : n; int* SortedBlock = new int[RightBorder - LeftBorder];
while (LeftBorder + LeftBlockIterator < MidBorder && MidBorder + RightBlockIterator < RightBorder) { if (arr[LeftBorder + LeftBlockIterator].M[i] < arr[MidBorder + RightBlockIterator].M[i]) { SortedBlock[LeftBlockIterator + RightBlockIterator] = arr[LeftBorder + LeftBlockIterator].M[i]; LeftBlockIterator++; } else { SortedBlock[LeftBlockIterator + RightBlockIterator] = arr[MidBorder + RightBlockIterator].M[i]; RightBlockIterator++; } } while (LeftBorder + LeftBlockIterator < MidBorder) { SortedBlock[LeftBlockIterator + RightBlockIterator] = arr[LeftBorder + LeftBlockIterator].M[i]; LeftBlockIterator++; } while (MidBorder + RightBlockIterator < RightBorder) { SortedBlock[LeftBlockIterator + RightBlockIterator] = arr[MidBorder + RightBlockIterator].M[i]; RightBlockIterator++; }
for (int MergeIterator = 0; MergeIterator < LeftBlockIterator + RightBlockIterator; MergeIterator++) { arr[LeftBorder + MergeIterator].M[i] = SortedBlock[MergeIterator]; } delete SortedBlock;
}
} } } 